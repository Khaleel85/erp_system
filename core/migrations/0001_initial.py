# Generated by Django 4.1.9 on 2023-07-13 17:00

import core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_ar', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name Arabic')),
                ('name_unlang', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name Unlang')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='Birthdate')),
                ('identification', models.CharField(blank=True, max_length=14, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Entered ID number isn't in a right format!", regex='^[0-9]{14}$')], verbose_name='Identification')),
                ('education', models.CharField(blank=True, max_length=255, null=True, verbose_name='Education')),
                ('recruitment', models.CharField(blank=True, choices=[('Finished Military Service', 'finished military service'), ('Temporary Exemption from Military Service', 'temporary exempted from military service'), ('Final Exemption from Military Service', 'final exemption from military service')], max_length=100, null=True, verbose_name='Military Service')),
                ('gender', models.CharField(choices=[('Male', 'male'), ('Female', 'female')], default='male', max_length=6, verbose_name='Gender')),
                ('marital_status', models.CharField(choices=[('Single', 'single'), ('Married', 'married'), ('Single Parent', 'single parent')], max_length=13, verbose_name='Martial Status')),
                ('home_address', models.TextField(verbose_name='Home Address')),
                ('mobile_number', models.CharField(blank=True, max_length=11, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Entered mobile number isn't in a right format!", regex='^[0-9]{11}$')], verbose_name='Mobile Number')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=core.models.employee_photo_file_path, verbose_name='Photo')),
                ('bank_name', models.CharField(max_length=255, verbose_name='Bank Name')),
                ('bank_branch', models.CharField(max_length=255, verbose_name='Bank Branch')),
                ('bank_account_name', models.CharField(max_length=255, verbose_name='Bank account name')),
                ('bank_account_number', models.CharField(max_length=255, verbose_name='Bank account number')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('employment_type', models.CharField(choices=[('Permanent', 'permanent'), ('Contract', 'contract')], max_length=10, verbose_name='Employment Type')),
                ('position', models.CharField(max_length=255, verbose_name='Position')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Status')),
                ('is_staff', models.BooleanField(default=True, verbose_name='Is Staff')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Department name')),
                ('details', models.TextField(verbose_name='Department Details')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Branch name')),
                ('address', models.TextField(verbose_name='Branch address')),
                ('details', models.TextField(verbose_name='Branch details')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Branch',
                'verbose_name_plural': 'Branches',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='branch_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='core.branch', verbose_name='Branch Name'),
        ),
        migrations.AddField(
            model_name='user',
            name='department_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='core.department', verbose_name='Department Name'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
